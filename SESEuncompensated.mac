#########################################################
# 
# SESEuncompensated
#                 SESEuncompensated_pp.mac
# Copyright (c) Magritek GmbH 2014
#
# U.I. V3
#########################################################

procedure(SESEuncompensated, guipar)

   keaCtrl:checkVersion(2.15,1.1)

   n = :windowdefinition()

   windowvar(wv_dispMode,wv_ctrls,wv_shift,wv_other,wv_rel,
             wv_pp_list,wv_pp_name,wv_var,wv_tabs,wv_phase_list)

   wv_tabs  = ["Pulse Sequence","acquisition","File settings"] # Tab names
   wv_ctrls = [2,24,25,48,49,69,70,79] # Control groups
   wv_shift = [-14,154,322,325] # Amount to shift control groups
   wv_other = [78,236,555]  # Collapse control and window size
   wv_saved = "false"

   (wv_rel,wv_var,wv_pp_list,wv_pp_name,wv_phase_list) = :getseqpar()

   if(nrArgs == 0)
      guipar = "show"
   endif

   keaCtrl:setUp(n,"SESEuncompensated",getmacropath(),guipar)
   if(guipar == "hide")
      return(n)
   elseif(guipar == "show")
      try; :initGUI(n); catch; endtry;
      showwindow(n)
      return(n)
   else
      setwindowpar(n,"type","dialog")
      guipar = showdialog(n)
      return(guipar)
   endif

endproc()

#########################################################
# 
# Returns important pulse sequence parameters
#
# rel ......... relationship between pulse sequence parameters
# var ......... variable which change during the pulse sequence
# pp_list ..... list of pulse sequence parameters sent to DSP
# pp_name ..... name of DSP pulse program to run
# phase_list .. phase cycling information
#
#########################################################

procedure(getseqpar)

   rel = ["a1 = 90Amplitude",
          "a2 = 180Amplitude",
          "d1 = pulseLength",
          "d3 = echoTime/2-acqTime*500-d1/2+rxLat+echoShift",
          "d4 = echoTime-d1-pgo-d3",
          "d5 = 1000*tau1-d1-pgo",
          "d7 = 1000*tau2-d1-pgo",
          "d8 = 1000*tau2+echoTime/2-d1-pgo",
          "n1 = nrEchoes",
          "n2 = nrPnts",
          "totPnts = nrEchoes",
          "totTime = nrEchoes*echoTime"]
   var = [""]
   pp_list = ["a1","p1","d1","d5","a2","p2","p3","d7","p4","d8","n1","l1","p5","d3","n2","d4"]
   pp_name = "SESEuncompensated.p"
   phase_list = [0,2,0,2,0,2,0,2;1,1,3,3,3,3,1,1;1,1,3,3,3,3,1,1;1,1,3,3,1,1,3,3;1,1,1,1,1,1,1,1;0,2,0,2,0,2,0,2]

endproc(rel,var,pp_list,pp_name,phase_list)


#########################################################
# 
# Provide an interface to this macro which does not
# require the use of the window interface
#
# User must supply a list of parameter (see help file)
# and the pulse program name if different from 
# "$macro$_ext.p"
#
#########################################################

procedure(backdoor, guipar)

   keaCtrl:checkVersion(2.15,1.1)

   (rel,var,pp_list,pp_name,phase_list) = :getseqpar()
  
   (guipar,ppList,pcList,pcIndex,varList) = keaCtrl:initialisePP(getmacropath(),getmacroname(),guipar,rel,var,pp_list,pp_name,phase_list)
   
   r = keaCtrl:runBDPP(guipar,ppList,pcList,pcIndex,varList)

endproc(r)

#########################################################
# 
# Define the window gui
#
#########################################################

procedure(windowdefinition)

   # Automatically generated window definition procedure.
   # Any code added manually will be removed if layout modified interactively
   n = window("double diffusion encoding uncompensated with tau1 and tau2 independently defined", -1, -1, 758, 552)

      # Define all controls with basic parameters
      getmessage(0,
        keaCtrl:processMessage();)
      tab(1, 6, 7, 740, 224,
         which = getpar(0,1,"currenttab");)
      groupbox(2, "Pulse sequence", 9, 9, 732, 161)
      statictext(3, 66, 27, "center", "B1 Frequency (MHz)")
      textbox(4, 43, 41, 46)
      statictext(5, 66, 67, "center", "Repetition time (ms)")
      textbox(6, 43, 82, 46)
      statictext(7, 221, 35, "right", "90 amplitude (dB)")
      textbox(8, 227, 31, 40)
      statictext(9, 221, 61, "right", "180 amplitude (dB)")
      textbox(10, 227, 57, 40)
      statictext(11, 221, 87, "right", "Pulse length (us)")
      textbox(12, 227, 83, 40)
      statictext(13, 376, 35, "right", "Echotime (us)")
      textbox(14, 382, 31, 40)
      statictext(15, 376, 61, "right", "Number of echoes")
      textbox(16, 382, 57, 40)
      statictext(17, 376, 87, "right", "Echo shift (us)")
      textbox(18, 382, 83, 40)
      statictext(19, 376, 139, "right", "Gradient (kHz/mm)")
      textbox(20, 382, 135, 46)
      statictext(21, 531, 61, "right", "tau1 (ms)")
      textbox(22, 537, 57, 40)
      statictext(23, 686, 61, "right", "tau2 (ms)")
      textbox(24, 692, 57, 40)
      groupbox(25, "Acquisition", 9, 177, 732, 161)
      statictext(26, 169, 212, "center", "Rx Gain (dB)")
      textmenu(27, 152, 230, 39, 200)
      statictext(28, 169, 261, "center", "Rx Phase (degrees)")
      textbox(29, 152, 277, 39)
      statictext(30, 277, 214, "center", "Number of")
      statictext(31, 277, 227, "center", "complex points")
      textmenu(32, 324, 216, 62, 200,
         keaCtrl:updateAcqTime();)
      statictext(33, 277, 246, "center", "Dwell time")
      statictext(34, 277, 259, "center", "(us)")
      textmenu(35, 324, 249, 62, 200,
         keaCtrl:updateFilters();)
      statictext(36, 277, 280, "center", "Number of")
      statictext(37, 277, 293, "center", "scans")
      textbox(38, 324, 281, 62)
      statictext(39, 451, 228, "center", "Flat filter")
      checkbox(40, 487, 229, "no,yes", "no",
           keaCtrl:setDwellTimeMenu();
           keaCtrl:updateFilters();)
      statictext(41, 451, 252, "center", "Accumulate")
      checkbox(42, 487, 253, "no,yes", "no")
      statictext(43, 451, 276, "center", "Phase cycle")
      checkbox(44, 487, 278, "no,yes", "yes")
      statictext(45, 579, 212, "center", "Spectral width (kHz)")
      textbox(46, 550, 226, 56)
      statictext(47, 579, 263, "center", "Acquisition time (ms)")
      textbox(48, 550, 277, 56)
      groupbox(49, "File_Settings", 9, 345, 732, 161)
      statictext(50, 172, 399, "right", "Working")
      statictext(51, 172, 412, "right", "directory")
      textbox(52, 188, 400, 215)
      button(53, 408, 400, 22, 22, "...",
         keaFiles:setWorkingDir();)
      statictext(54, 179, 436, "right", "Experiment")
      statictext(55, 164, 449, "right", "name")
      textbox(56, 188, 439, 105)
      button(57, 299, 439, 22, 22, "...",
         keaFiles:setExpName();)
      statictext(58, 401, 436, "right", "Experiment")
      statictext(59, 391, 449, "right", "number")
      textbox(60, 409, 439, 25)
      button(61, 439, 439, 22, 22, "...",
         keaFiles:setExpNr();)
      statictext(62, 463, 398, "center", "Save")
      statictext(63, 463, 411, "center", "data")
      checkbox(64, 491, 405, "false,true", "true")
      statictext(65, 507, 436, "center", "Auto")
      statictext(66, 507, 449, "center", "increment")
      checkbox(67, 542, 444, "no,yes", "no")
      button(68, 528, 393, 40, 36, "Load Data",
         keaFiles:loadData();)
      button(69, 583, 393, 40, 50, "Open data folder",
         keaFiles:openDataFolder();)
      colorbox(70, 110, 519, 10, 10, [255,255,255,255])
      colorbox(71, 110, 532, 10, 10, [255,255,255,255])
      button(72, 130, 516, 54, 29, "Run",
         (wv_rel,wv_var,wv_pp_list,wv_pp_name,wv_phase_list) = :getseqpar();
         keaCtrl:runPP(getmacropath(),wv_pp_name);)
      button(73, 195, 516, 54, 29, "Abort",
         setwindowpar(0,"title","Wait for macro to abort ...");
         wvExpStatus = "stop";)
      button(74, 260, 516, 54, 29, "Finish",
         setwindowpar(0,"title","Wait for phase-cycling to complete ...");
         wvExpStatus = "finish";)
      button(75, 325, 516, 54, 29, "Load Par.",
         keaFiles:loadParameters();)
      button(76, 390, 516, 54, 29, "Help",
         help("Macros\NMR-Mouse","SESEuncompensated.htm");)
      button(77, 455, 516, 54, 29, "Kea Pref.",
         keaCtrl:showPreferences();)
      button(78, 520, 516, 54, 29, "Collapse",
         keaCtrl:toggleWindowSize(1);)
      button(79, 585, 516, 54, 29, "Close",
         guipar = getctrlvalues(0);
         if(getwindowpar(0,"type") == "dialog");
         guipar = keaFiles:addWindowSpecifics(guipar);
         keaFiles:saveCommonPar(guipar);
         closedialog(guipar);
         else;
         keaFiles:saveParameters();
         closewindow(0);
         endif;)
      menu(80, "bkgMenu", "Edit macro\tCtrl+Dbl-Click", edit("$getmacroname()$"),
                "Show compiler\tCtrl+Shift+Dbl-Click", MakePulseProgram("$getmacropath()$","$rmext(getmacroname())$"))

     # Set other control parameters
      setpar(n,1,"active","true",
                  "inittabs",[""])
      setpar(n,4,"valueID","b1Freq",
                  "tag","freqRange",
                  "type","double",
                  "range",[1,400])
      setpar(n,6,"valueID","repTime",
                  "type","float",
                  "range",[20,1e+008])
      setpar(n,8,"valueID","90Amplitude",
                  "type","float",
                  "range",[-72,-6])
      setpar(n,10,"valueID","180Amplitude",
                  "type","float",
                  "range",[-85,0])
      setpar(n,12,"valueID","pulseLength",
                  "type","float",
                  "range",[1,500])
      setpar(n,14,"valueID","echoTime",
                  "type","float",
                  "range",[2,327670])
      setpar(n,16,"valueID","nrEchoes",
                  "type","integer",
                  "range",[1,16000])
      setpar(n,18,"valueID","echoShift",
                  "type","float",
                  "range",[-20,20])
      setpar(n,20,"valueID","gradient",
                  "type","float")
      setpar(n,22,"valueID","tau1",
                  "type","float",
                  "range",[0.001,100])
      setpar(n,24,"valueID","tau2",
                  "type","float",
                  "range",[0.001,100])
      setpar(n,27,"valueID","rxGain",
                  "type","integer",
                  "tooltip","20-40 dB gives optimal SNR.\rDecrease if overload occurs.",
                  "range",[-20,70],
                  "menu",["-20","-17","-14","-11","-8","-5","-2","1","4","7","10","13","16","19","22","25","28","31","34","37","40","43","46","49","52","55","58","61","64","67","70"])
      setpar(n,29,"valueID","rxPhase",
                  "type","float",
                  "tooltip","Applies a fixed phase shift to collected data.\rIgnored if autophasing.")
      setpar(n,32,"valueID","nrPnts",
                  "type","integer",
                  "range",[2,65536],
                  "menu",["2","4","8","16","32","64","128","256","512","1024","2048","4096","8192","16384","32768","65536"])
      setpar(n,35,"valueID","dwellTime",
                  "type","float",
                  "menu",[""])
      setpar(n,38,"valueID","nrScans",
                  "type","integer",
                  "range",[1,1e+006])
      setpar(n,40,"valueID","flatFilter",
                  "tooltip","On: all frequencies equally weighted.\rOff: center frequencies enhanced.")
      setpar(n,42,"valueID","accumulate")
      setpar(n,44,"valueID","usePhaseCycle")
      setpar(n,46,"valueID","bandwidth",
                  "tag","disable")
      setpar(n,48,"valueID","acqTime",
                  "tag","disable")
      setpar(n,52,"valueID","dataDirectory",
                  "type","string",
                  "tooltip","Where experimental data will be stored.")
      setpar(n,56,"valueID","expName",
                  "type","string",
                  "tooltip","A subdirectory of the data working directory to store different experiments.")
      setpar(n,60,"valueID","expNr",
                  "tooltip","A numbered subdirectory below the experiment name.\rNot made if entry is blank.")
      setpar(n,64,"valueID","saveData")
      setpar(n,67,"valueID","incExpNr",
                  "tooltip","Increment the experiment number after each experiment.")
      setpar(n,68,"tooltip","Load and display the data specified in the directories fields")
      setpar(n,69,"tooltip","View the data directory in Windows Explorer.")
      setpar(n,70,"objID","ppStatus",
                  "tooltip","Experiment Status Indicator\rGreen: running\rBlue: processing\rYellow: waiting")
      setpar(n,71,"objID","rxOverflow",
                  "tooltip","Receiver Overflow Indicator\rRed: overflow")
      setpar(n,72,"valueID","run",
                  "tooltip","Start the experiment.")
      setpar(n,73,"valueID","stop",
                  "tooltip","Stop the experiment without saving data.",
                  "active","true")
      setpar(n,74,"valueID","finish",
                  "tooltip","Finish the current phase cycle and save data.",
                  "active","true")
      setpar(n,75,"valueID","load",
                  "tooltip","Load a parameter set for a similar experiment.")
      setpar(n,76,"valueID","help",
                  "tooltip","Display HTML help for this experiment.",
                  "active","true")
      setpar(n,77,"valueID","showPref",
                  "tooltip","Display a preferences dialog for the Kea spectrometer.")
      setpar(n,78,"valueID","size",
                  "tooltip","Expand or collapse the window size to show all or fewer controls.",
                  "active","true")
      setpar(n,79,"valueID","close",
                  "tooltip","Close the window saving all parameters.")

     # Set other window parameters
      setwindowpar(n,"bkgmenu",80)

endproc(n)
 # :printOptTauMaxSSE();


#######################################################
# Execute the pulse program, collecting nrScans of 
# data and displaying the result in the 1D plot. 
#
# This procedure can be modified to perform more
# complex functions using the passed parameters:
#
# guipar ..... all parameters from the user interface
# ppList ..... the pulse program parameter list
# pcList ..... phase-cycle list
# pcIndex .... indices of phase parameters in ppList
# varIndex ... indices of variable parameters in ppList
#
#######################################################

procedure(execpp,guipar,ppList,pcList,pcIndex,varIndex,ext)


# Make all gui parameters available
   assignlist(guipar)

# Check RF duty cycle
  if(pulseLength*nrEchoes/repTime>160) #1.6 normally
    message("Error","RF duty cycle is too high, reduce nrEchoes or increase repTime","error") 
    return
  endif

# Check for p.s. duty cycle should be < 20%
#  if(d1/(echoTime) > 0.25)
#      message("Error","Duty cycle is too high in pulse sequence!\rshould be < 25%\rIncrease echo time\ror reduce pulse length.","error")
#      return
#   endif

   if(0==:checkDelay(d1,1)); return; endif
 ##  if(0==:checkDelay(d2,1)); return; endif
   if(0==:checkDelay(d3,1)); return; endif
   if(d4-keaNMR:getAcqTime(guipar) < 1)
      message("Error","Pulse sequence timing error!\rReduce acquisition time or increase echotime.","error")
      abort("")
   endif

   if(0==:checkDelay(d5,1)); return; endif
# Storage for output data

 #  try
 #     windowvar(sumData,totalTime,scans,tauAxis,tauAxis2,ampAxis)
 #  catch
 #  endtry

  sumData = cmatrix(totPnts) #testing if we need this
  data2D  = matrix(nrEchoes,2) #saving real signal (column 1) and imaginary signal (column 2)


# calculate the time axis 
   totalTime = matrix(totPnts)
   totalTime = ([0:1:totPnts-1]/totPnts)*totTime+echoTime





   try
      if(excecutedBackdoor == "yes")
     # pr "SEE excuted via backdoor\n"
      endif 
   catch
      excecutedBackdoor = "no"
      refSignal = 1
      multiplot("1d",3,1)
   endtry

   # Reset the timer
   time(0)  


   #start of experiment


  # reset sumData
      sumData = cmatrix(totPnts) 

   # Accumulate scan
      for(scan = 0 to nrScans-1)
       # Note the time at scan start
         t1 = time()   
   
       # Set phases for this scan
         (ppList,pAcq) = keaRun:setPPPhase(ppList,scan,pcList,pcIndex)
   
       # Send phase parameters to DSP
          dspwrite("x",0x00,ppList,wvPort)
   
       # Collect the data
         (status,data) = keaRun:getData(totPnts,guipar)
         data = data/nrPnts
          if(status != "ok")
            keaNMR:enableButtons()
            abort("")
          endif
   
       # Accumlate the data
         sumData = keaRun:accumulate(accumulate,pAcq,sumData,data)
   
        :graphTime2(sumData/refSignal,scan,totalTime,guipar)
    
    # Check timing
     check = keaRun:checkTimeAndAbort(guipar,t1,scan,pcList)
     if(check == "abort")
        return(0)
     elseif(check == "finish")
        scan = scan + 1
        exitfor()
     endif

      next(scan)
   
      sumData = sumData/nrScans/refSignal
 #     ampAxis[m]  = sum(real(sumData))/nrPnts

   data2D[~,0] = real(sumData)
   data2D[~,1] = imag(sumData)
   
   
      if(saveData == "true")
         :saveData(guipar,totalTime,data2D)

				# Output information to the CLI
				#pr "\n  data saved in:"
				#pr "\n  $dataDirectory$\\$expName$\\$expNr$"



      endif

 #        if(check == "finish")
 #           scans = scans+1
 #           exitfor()
            
 #        endif





# Increment the experiment number
   keaNMR:incrementExperiment(incExpNr)
        
   keaNMR:titleReset()

endproc("execpp")

#######################################################
# Save the accumulated data
# Either pass the parameters to save or use
# window variables of the same name.
#######################################################

procedure(saveData,guipar,totalTime,data2D)

# Make all gui parameters available
   assignlist(guipar)

# Save data and plot in chosen folder
   bak = getcwd()
   cd(dataDirectory)
   mkdir(expName)
   cd(expName)
   mkdir("$expNr$")
   cd("$expNr$")





# save 2D data
 
   export2dpar("ab","ascii","xyrc","real","delimiter","tab")
   export2d(data2D,"data2D.dat")  # Save data for origin


   
   export1dpar("ab", "ascii",  "xyrc", "real")
   totalTime=totalTime/1000   
  export1d( totalTime, "T2Axis.dat")   
   
# Restore cwd
   cd(bak)


endproc("saveData")



#################################################
procedure(graphTime2,fidData,n,t,guipar)

   assignlist(guipar)

# Allow for accumulations
   if(accumulate == "yes")
      sf = 1/(n+1)
   else
      sf = 1
   endif

# Select units
   if(wvUnits == "uV")
     
      ampUnits = "\G(m)V"
   else
      ampUnits = "mV"
      sf = sf * 0.001
   endif

   drawplot("false")
   
   curplot("1d",1,1) 
   plot(t,fidData*sf)
   xlabel("time(us)") 
   ylabel("Probe output amplitude ($ampUnits$)")
   title("Scan ($(n+1)$/$nrScans$)")
   drawplot("true")

endproc()

####

procedure(checkDelay,dx,limit)
 
   if (dx<= limit)
      message("error","Pulse sequence timing error","error")
      return (0)
   endif 
endproc(1)


